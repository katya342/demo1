FRACTION.H
class fraction
{
private:
	unsigned int numerator;
	unsigned int denominator;
public:
	fraction();
	fraction(const unsigned int num, const unsigned int den);
	fraction operator+(const fraction& obj);
	fraction operator-(const fraction& obj);
	fraction operator*(const fraction& obj);
	fraction operator/(const fraction& obj);
	fraction operator+(const int& value);
	fraction operator-(const int& value);
	operator float();
	void show();
};

///////////////////////////////////////////////////////////////////////////
MAIN


#include <iostream>
#include "fraction.h"
using namespace std;

int main()
{
	fraction first(3, 5), second(1, 2), third;

	third = first + second;

	third.show();
	cout << third << endl << endl;

	third = first - second;
	third.show();
	cout << third << endl << endl;

	third = first * second;
	third.show();
	cout << third << endl << endl;

	third = first / second;
	third.show();
	cout << third << endl << endl;
	float value = first;
	cout << value << endl;
	
	return 0;
}

fraction::fraction()
{
	cout << "Default constructor" << endl;
	this->denominator = 0;
	this->numerator = 0;
}

fraction::fraction(const unsigned int num, const unsigned int den)
{
	cout << "Constructor 1: " << endl;
	this->denominator = den;
	this->numerator = num;
}

fraction fraction::operator+(const fraction& obj)
{
	cout << "operator +" << endl;
	int a = obj.denominator * this->numerator, b = obj.numerator * this->denominator, c = this->denominator * obj.denominator;
	return fraction (a+b, c);
}

fraction fraction::operator-(const fraction& obj)
{
	cout << "operator -" << endl;
	int a = obj.denominator * this->numerator, b = obj.numerator * this->denominator, c = this->denominator * obj.denominator;
	return fraction(a-b, c);
}

fraction fraction::operator*(const fraction& obj)
{
	cout << "operator *" << endl;
	int a = this->numerator * obj.numerator, b = this->denominator * obj.denominator;
	return fraction(a, b);
}

fraction fraction::operator/(const fraction& obj)
{
	cout << "constructor /" << endl;
	int a = this->numerator * obj.denominator, c = this->denominator * obj.numerator;
	return fraction(a, c);
}

fraction fraction::operator+(const int& value)
{
	int a = this->denominator * value, b = this->numerator * 1, c = this->denominator * 1;
	return fraction(b + a, c);
}

fraction fraction::operator-(const int& value)
{
	int a = this->denominator * 1, b = this->numerator * 1, c = value * this->denominator;
	return fraction(b - c, a);
}

fraction::operator float()
{
	if (this->denominator == 0 && this->numerator == 0)
		cout << "Ошибка" << endl;
	return float(this->numerator) / float(this->denominator);
}

void fraction::show()
{
	cout << this->numerator << " / " << this->denominator << endl;
}









